#! ksh

function tomcat_stop {

    # Read-in the PID file if it exists and assert that Tomcat is running; remove any state PID file.
    tomcat_getpidf; if  (( rc.tomcat.pid.file != PIDF_FOUND || rc.tomcat.pid.id == 0 || rc.tomcat.pid.running == false )); then

        # Output appropriate information for above failed test(s)
        (( rc.tomcat.pid.file != PIDF_FOUND )) && clog +info "Invalid or missing PID file (${rc.tomcat.pidf##*/})"
        (( rc.tomcat.pid.running == false   )) && clog +info "Stale Tomcat process ID (${rc.tomcat.pid.id})"
        (( rc.tomcat.pid.id == 0            )) && clog +info 'Process ID cannot be null!'

        clog +croak-info 'Tomcat is apparently already stopped.'
        (( rc.tomcat.pid.file == PIDF_NOTFOUND )) || tomcat_delpidf stale
        return

    fi

    # Try stopping Tomcat cleanly by issuing the appropriate Java statement
    typeset cmd pid=${rc.tomcat.pid.id}; tomcat_mkjavacmd @cmd "$@"; if (( rc.opts.dryrun == true )); then
        clog +croak-info 'Stopping Tomcat [dryrun].'
        clog +noexec "$cmd"
        return
    else $cmd; fi

    # Gracefully shutdown the Tomcat server and clear the PID file
    tomcat_kill $pid && tomcat_delpidf

    # We're done
    clog +step-pass "Tomcat (#$pid) successfully stopped."

}

# __END__
