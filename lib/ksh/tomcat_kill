#! ksh

function tomcat_kill {

    # We try using the system `kill(1)` command to bring down, gracefully at first, the process
    integer signal; for signal in 0 15 1 3 9; do

        # Apply grace period, if any, and verify whether process is still running
        (( rc.tomcat.wait > 0 )) && sleep ${rc.tomcat.wait}
        ps -p $pid >/dev/null 2>&1 || rc.tomcat.pid.running=false

        # We're done if the process has stopped
        (( rc.tomcat.pid.running == false )) && break

        # We only proceed further if the --force option has been given (except for kill -0)
        (( signal > 0 && rc.opts.force == false )) && break

        kill -$signal $pid >/dev/null 2>&1 || clog +error "An error occured when trying to kill PID $pid with signal $signal."

    done

    # If the Tomcat process is still running, we have a fatal error
    if (( rc.tomcat.pid.running == true )); then
        typeset msg="Failed to terminate Tomcat process #$pid;"
        (( signal == 9 )) && msg+='this might be a zombie process.' || msg+='try the \E[33m--force\E[0m option.'
        clog +abort "$msg PID file (${rc.tomcat.pidf##*/}) has been left in place."
    fi

    # We're done... return status to caller
    (( rc.tomcat.pid.running == true ))

}

# __END__
